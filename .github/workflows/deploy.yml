name: CI/CD with AWS ECR and EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 1. 빌드 및 테스트 잡 -> 'test' 잡으로 역할을 명확히 함
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: chmod +x ./gradlew
        # 참고: PR 검증 시에는 테스트를 실행하는 것이 좋습니다. (-x test 제거 권장)
      - run: ./gradlew build -x test

  # 2. 배포 잡
  deploy:
    # 'test' 잡이 성공해야만 실행
    needs: test
    # main 브랜치에 push될 때만 실행
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # AWS 인증 정보 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ap-northeast-2

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 및 ECR에 푸시
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG:      ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # EC2에 배포
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ec2-user
          key:      ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # 기존 컨테이너 중지 및 삭제
            docker stop my-app || true
            docker rm my-app || true
            
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
            
            # 새 컨테이너 실행 (환경 변수 전달)
            docker run -d --name my-app -p 8080:8080 \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }} \
              -e JWT_ACCESS_HEADER=${{ secrets.JWT_ACCESS_HEADER }} \
              -e JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }} \
              -e JWT_REFRESH_HEADER=${{ secrets.JWT_REFRESH_HEADER }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e S3_REGION=${{ secrets.S3_REGION }} \
              -e S3_BUCKETNAME=${{ secrets.S3_BUCKETNAME }} \
              -e WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }} \
              -e KAKAO_API_KEY=${{ secrets.KAKAO_API_KEY }} \
              ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
